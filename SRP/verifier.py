import hashlib

# Calculating M1, verifier

p = 233000556327543348946447470779219175150430130236907257523476085501968599658761371268535640963004707302492862642690597042148035540759198167263992070601617519279204228564031769469422146187139698860509698350226540759311033166697559129871348428777658832731699421786638279199926610332604408923157248859637890960407
pb = (p).to_bytes((p.bit_length()+7)//8, byteorder='big')
hash_p = hashlib.sha256(pb).digest()
int_p = int.from_bytes(hash_p,'big')

g = 5
gb = (g).to_bytes((g.bit_length()+7)//8, byteorder='big')
hash_g = hashlib.sha256(gb).digest()
int_g = int.from_bytes(hash_g,'big')

first = int_p^int_g  #first
res = first.to_bytes((first.bit_length()+7)//8,byteorder='big')

id = 'mtiwari'
netid = bytes(id.encode('ascii'))
hash_id = hashlib.sha256(netid).digest()  # second

salt = bytes.fromhex('f119ea19')

a = 186264514923095703125
ga = a.to_bytes((a.bit_length()+7)//8, byteorder='big')

b = 23365563067344007521068154039287875489202390801390178234881270602720370049691710137997957073839840701130009949115098522743859437917735439099297512828598898415556901448292696207480780225635240087479449892625700664163648630207210037035841789458446153029168193954996500781671778494956845899627046086142470237095
gb = b.to_bytes((b.bit_length()+7)//8, byteorder='big')

sk = 32500078386895404173571108992761867964096145439649367496926497469319379937270804815301235942174667874143221187890243394180310216932588824181659316155871680365406798594363354792770955434817913803676517262314659711761339906865098608717035635710745275632427550342605848134213698968347266207524279457750451189342
sharedKey = sk.to_bytes((sk.bit_length()+7)//8, byteorder='big')

final = res+hash_id+salt+ga+gb+sharedKey

m1digest = hashlib.sha256(final).digest()
print(m1digest.hex())

m2digest = hashlib.sha256(ga+m1digest+sharedKey).digest()
print(m2digest.hex())

